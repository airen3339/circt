//===- FIRRTLStructure.td - Circuit and Module Ops ---------*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This describes the FIRRTL Circuit and Module MLIR ops.
//
//===----------------------------------------------------------------------===//

include "circt/Dialect/HW/HWTypes.td"
include "circt/Types.td"

def CircuitOp : FIRRTLOp<"circuit",
      [IsolatedFromAbove, SymbolTable, SingleBlock, NoTerminator,
       NoRegionArguments]> {
  let summary = "FIRRTL Circuit";
  let description = [{
    The "firrtl.circuit" operation represents an overall Verilog circuit,
    containing a list of modules.
  }];
  let arguments = (ins StrAttr:$name,
                   DefaultValuedAttr<AnnotationArrayAttr, "{}">:$annotations);
  let results = (outs);
  let regions = (region SizedRegion<1>:$body);

  let skipDefaultBuilders = 1;
  let builders = [
    OpBuilder<(ins "StringAttr":$name,
               CArg<"ArrayAttr","ArrayAttr()">:$annotations)>
  ];

  let extraClassDeclaration = [{
    OpBuilder getBodyBuilder() {
      assert(!body().empty() && "Unexpected empty 'body' region.");
      Block &bodyBlock = body().front();
      return OpBuilder::atBlockEnd(&bodyBlock);
    }

    /// Return body of this circuit.
    Region &getBodyRegion();
    Block *getBody();

    // Return the main module that is the entry point of the circuit.  This may
    // be either an FModuleOp or an FExtModuleOp.
    FModuleLike getMainModule();
  }];

  let assemblyFormat = "$name custom<CircuitOpAttrs>(attr-dict) $body";
  let hasVerifier = 1;
}

def FModuleOp : FIRRTLOp<"module", [IsolatedFromAbove, Symbol, SingleBlock,
                                    NoTerminator, HasParent<"CircuitOp">,
                                    DeclareOpInterfaceMethods<FModuleLike>,
                                    DeclareOpInterfaceMethods<HWModuleLike>,
                                    OpAsmOpInterface, InnerSymbolTable]> {
  let summary = "FIRRTL Module";
  let description = [{
    The "firrtl.module" operation represents a Verilog module, including a given
    name, a list of ports, and a body that represents the connections within
    the module.
  }];
  let arguments =
            (ins DefaultValuedAttr<AnnotationArrayAttr, "{}">:$annotations);

  let results = (outs);
  let regions = (region SizedRegion<1>:$body);

  let skipDefaultBuilders = 1;
  let hasCustomAssemblyFormat = 1;
  let builders = [
    OpBuilder<(ins "StringAttr":$name, "ArrayRef<PortInfo>":$ports,
               CArg<"ArrayAttr","ArrayAttr()">:$annotations)>
  ];

  let extraClassDeclaration = [{
    Block *getBody() { return &body().front(); }

    using iterator = Block::iterator;
    iterator begin() { return getBody()->begin(); }
    iterator end() { return getBody()->end(); }

    Block::BlockArgListType getArguments() {
      return getBody()->getArguments();
    }

    // Return the block argument for the port with the specified index.
    BlockArgument getArgument(size_t portNumber);

    OpBuilder getBodyBuilder() {
      assert(!body().empty() && "Unexpected empty 'body' region.");
      Block &bodyBlock = body().front();
      return OpBuilder::atBlockEnd(&bodyBlock);
    }

    /// Inserts the given ports.
    void insertPorts(ArrayRef<std::pair<unsigned, PortInfo>> ports);

    /// Erases the ports listed in `portIndices`.  `portIndices` is expected to
    /// be in order and unique.
    void erasePorts(ArrayRef<unsigned> portIndices);

    void getAsmBlockArgumentNames(mlir::Region &region,
                                  mlir::OpAsmSetValueNameFn setNameFn);
  }];

}

def FExtModuleOp : FIRRTLOp<"extmodule",
      [IsolatedFromAbove, Symbol, HasParent<"CircuitOp">, OpAsmOpInterface,
       DeclareOpInterfaceMethods<FModuleLike>,
       DeclareOpInterfaceMethods<HWModuleLike>]> {
  let summary = "FIRRTL extmodule";
  let description = [{
    The "firrtl.extmodule" operation represents an external reference to a
    Verilog module, including a given name and a list of ports.
  }];
  let arguments = (ins
                   OptionalAttr<StrAttr>:$defname,
                   ParamDeclArrayAttr:$parameters,
                   DefaultValuedAttr<AnnotationArrayAttr, "ArrayAttr()">:$annotations
                  );
  let results = (outs);
  let regions = (region AnyRegion:$body);

  let skipDefaultBuilders = 1;
  let builders = [
    OpBuilder<(ins "StringAttr":$name,
                      "ArrayRef<PortInfo>":$ports,
                      CArg<"StringRef", "StringRef()">:$defnamAttr,
                      CArg<"ArrayAttr", "ArrayAttr()">:$annotations,
                      CArg<"ArrayAttr", "ArrayAttr()">:$parameters)>
  ];

  let extraClassDeclaration = [{
    void getAsmBlockArgumentNames(mlir::Region &region,
                                  mlir::OpAsmSetValueNameFn setNameFn);
  }];

  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
}

def FMemModuleOp : FIRRTLOp<"memmodule",
      [IsolatedFromAbove, Symbol, HasParent<"CircuitOp">, OpAsmOpInterface,
       DeclareOpInterfaceMethods<FModuleLike>,
       DeclareOpInterfaceMethods<HWModuleLike>]> {
  let summary = "FIRRTL Generated Module";
  let description = [{
    The "firrtl.memmodule" operation represents an external reference to a
    memory module. See the "firrtl.mem" op for a deeper explantation of the
    parameters.

    A "firrtl.mem" operation is typically lowered to this operation when they
    are not directly lowered to registers by the compiler.
  }];
  let arguments =
    (ins UI32Attr:$numReadPorts, UI32Attr:$numWritePorts,
         UI32Attr:$numReadWritePorts, UI32Attr:$dataWidth, UI32Attr:$maskBits,
         UI32Attr:$readLatency, UI32Attr:$writeLatency, UI64Attr:$depth,
         ArrayAttr:$extraPorts, AnnotationArrayAttr:$annotations);
  let results = (outs);
  let regions = (region AnyRegion:$body);

  let skipDefaultBuilders = 1;
  let builders = [
    OpBuilder<(ins "StringAttr":$name, "ArrayRef<PortInfo>":$ports,
                   "uint32_t":$numReadPorts,  "uint32_t":$numWritePorts,
                   "uint32_t":$numReadWritePorts, "uint32_t":$dataWidth,
                   "uint32_t":$maskBits, "uint32_t":$readLatency,
                   "uint32_t":$writeLatency, "uint64_t":$depth,
                   CArg<"ArrayAttr", "ArrayAttr()">:$annotations)>
  ];

  let extraClassDeclaration = [{
    /// Return true if this memory has a mask.
    bool isMasked() { return maskBits() > 1; }

    /// Inserts the given ports.
    void insertPorts(ArrayRef<std::pair<unsigned, PortInfo>> ports);

    void getAsmBlockArgumentNames(mlir::Region &region,
                                  mlir::OpAsmSetValueNameFn setNameFn);
  }];

  let hasCustomAssemblyFormat = 1;
}

def HierPathOp : FIRRTLOp<"hierpath",
      [IsolatedFromAbove, Symbol,
       DeclareOpInterfaceMethods<SymbolUserOpInterface>,
       DeclareOpInterfaceMethods<HierarchicalPathLike>,
       HasParent<"CircuitOp">]> {
  let summary = "Hierarchical path specification";
  let description = [{
    The "firrtl.hierpath" operation represents a path through the hierarchy.
    This is used to specify namable things for use in other operations, for 
    example in verbatim substitution. Non-local annotations also use these.
  }];
  let arguments = (ins SymbolNameAttr:$sym_name, NameRefArrayAttr:$namepath);
  let results = (outs);
  let hasCustomAssemblyFormat = 1;
}
