name: Short integration tests

# Run the integration tests on one configuration (of the nightly matrix) on each
# push to main. Should catch 95% of integration test breakages. Useful for
# identifying the particular offending commit and emailing the commit author.

# Note: currently the integration tests don't take that long to run (<1 min).
# If, in the future, they take significantly longer (>~1 hour), we should
# reconsider this.

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Build CIRCT and run its tests using a Docker container with all the
  # integration testing prerequisite installed.
  build-circt:
    name: Build and Test
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/circt/images/circt-integration-test:v11
    strategy:
      # Keep the 'matrix' strategy with one data point to make it obvious that
      # this is one point in the overall matrix.
      matrix:
        build-assert: [ON]
        build-shared: [ON]
        build-type: [Release]
        compiler:
          - cc: clang
            cxx: clang++

    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 1G

      # Choose the git commit to diff against for the purposes of PR gates.
      # Since this workflow is triggered on both pushes and pull requests, we
      # have to determine if the pull request target branch is set (which it
      # will only be on the PR triggered flow). If it's not, then compare
      # against the last commit.
      - name: choose-commit
        if: ${{ always() }}
        env:
          # Base ref is the target branch, in text form (not hash)
          PR_BASE: ${{ github.base_ref }}
        run: |
          # Run clang-format
          if [ -z "$PR_BASE" ]; then
            DIFF_COMMIT_NAME="HEAD^"
          else
            DIFF_COMMIT_NAME="$PR_BASE"
          fi
          echo "DIFF_COMMIT_NAME=$DIFF_COMMIT_NAME" >> $GITHUB_ENV

      # Since we did a shallow fetch for this repo, we must fetch the commit
      # upon which we be diff'ing. The last step set the ref name in the
      # $DIFF_COMMIT_NAME environment variable. When running the fetch, resolve
      # it to the commit hash and pass that hash along to subsequent steps.
      - name: git fetch base commit
        continue-on-error: true
        run: |
          if echo "$DIFF_COMMIT_NAME" | grep -q HEAD; then
            DIFF_COMMIT_SHA=$( git rev-parse $DIFF_COMMIT_NAME )
          else
            git fetch --recurse-submodules=no origin $DIFF_COMMIT_NAME
            DIFF_COMMIT_SHA=$( git rev-parse origin/$DIFF_COMMIT_NAME )
          fi
          echo "DIFF_COMMIT=$DIFF_COMMIT_SHA" >> $GITHUB_ENV

      - name: PyCDE test execution gate
        run: |
          # If this is a PR, run the PR gate
          if [ ${{ github.event.action }} == "opened" ] || [ ${{ github.event.action }} == "synchronize" ] || [ ${{ github.event.action }} == "reopened" ] ]; then
            # Only run the job if there is a change in anything PyCDE-related.
            pip3 install GitPython # until https://github.com/circt/images/pull/23 lands
            echo "RUN_PYCDE_CI=1" >> $GITHUB_ENV
          else
            echo "This is a manually triggered build. Running PyCDE CI."
            echo "RUN_PYCDE_CI=1" >> $GITHUB_ENV
          fi

      # --------
      # Build and test CIRCT
      # --------

      - name: Configure CIRCT
        env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
          BUILD_ASSERT: ${{ matrix.build-assert }}
          BUILD_SHARED: ${{ matrix.build-shared }}
          BUILD_TYPE: ${{ matrix.build-type }}
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          mkdir build && cd build
          cmake -GNinja ../llvm/llvm \
            -DBUILD_SHARED_LIBS=$BUILD_SHARED \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DLLVM_CCACHE_BUILD=ON \
            -DLLVM_ENABLE_ASSERTIONS=$BUILD_ASSERT \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_EXTERNAL_PROJECTS=circt \
            -DLLVM_EXTERNAL_CIRCT_SOURCE_DIR=.. \
            -DLLVM_USE_LINKER=lld \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DCIRCT_BINDINGS_PYTHON_ENABLED=ON \
            -DCIRCT_ENABLE_FRONTENDS=PyCDE \
            -DLLVM_LIT_ARGS='-sv --show-unsupported'
      - name: Test CIRCT
        run: |
          ninja -C build check-circt -j$(nproc)
      - name: Integration Test CIRCT
        run: |
          ninja -C build check-circt-integration -j$(nproc)

      - name: Test PyCDE
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          ninja -C build check-pycde -j$(nproc)
      
      - name: Test PyCDE integration tests
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          ninja -C build check-pycde-integration -j$(nproc)

      - name: Ccache stats
        run: |
          ccache -s
