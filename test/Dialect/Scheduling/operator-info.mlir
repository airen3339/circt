// RUN: circt-opt %s | FileCheck %s
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
#adder = #sched.opr<"add", latency=4>
#multiplier = #sched.opr<"mult", latency=6>

// CHECK-LABEL:   func @simple_pipeline(
// CHECK-SAME:                          %[[VAL_0:.*]]: f32, %[[VAL_1:.*]]: f32, %[[VAL_2:.*]]: f32) -> f32 {
// CHECK:           %[[VAL_3:.*]] = "staticlogic.pipeline"(%[[VAL_0]], %[[VAL_1]], %[[VAL_2]]) ( {
// CHECK:           ^bb0(%[[VAL_4:.*]]: f32, %[[VAL_5:.*]]: f32, %[[VAL_6:.*]]: f32):
// CHECK:             %[[VAL_7:.*]] = mulf %[[VAL_4]], %[[VAL_5]] {opr = #sched.opr<"add", latency=4>} : f32
// CHECK:             %[[VAL_8:.*]] = addf %[[VAL_7]], %[[VAL_6]] {opr = #sched.opr<"mult", latency=6>} : f32
// CHECK:             "staticlogic.return"(%[[VAL_8]]) : (f32) -> ()
// CHECK:           }) : (f32, f32, f32) -> f32
// CHECK:           return %[[VAL_9:.*]] : f32
// CHECK:         }
func @simple_pipeline(%a : f32, %b : f32, %c : f32) -> f32 {
  %0 = "staticlogic.pipeline"(%a, %b, %c) ( {
    ^bb0(%in_a : f32, %in_b : f32, %in_c : f32):
      %mul = mulf %in_a, %in_b {opr = #adder} : f32
      %add = addf %mul, %in_c {opr = #multiplier} : f32
      "staticlogic.return"(%add) : (f32) -> ()
    }) : (f32, f32, f32) -> f32
  return %0 : f32
}
