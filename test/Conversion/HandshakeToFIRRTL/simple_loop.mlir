// RUN: circt-opt -create-dataflow -remove-block-structure -lower-handshake-to-firrtl %s | FileCheck %s

// CHECK:       module {
// CHECK:         firrtl.circuit "simple_loop" {
// CHECK-LABEL:     firrtl.module @handshake.branch_1ins_1outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>) {
// CHECK-LABEL:     firrtl.module @handshake.control_merge_1ins_2outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.fork_1ins_3outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>) {
// CHECK-LABEL:     firrtl.module @handshake.sink_1ins_0outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>) {
// CHECK-LABEL:     firrtl.module @handshake.constant_1ins_1outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.branch_1ins_1outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.mux_3ins_1outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg2: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.fork_1ins_2outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.control_merge_2ins_2outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @std.cmpi_2ins_1outs_slt(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>) {
// CHECK-LABEL:     firrtl.module @handshake.fork_1ins_3outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>) {
// CHECK-LABEL:     firrtl.module @handshake.conditional_branch_2ins_2outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.conditional_branch_2ins_2outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg3: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>) {
// CHECK-LABEL:     firrtl.module @handshake.merge_1ins_1outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @handshake.fork_1ins_2outs_ctrl(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>) {
// CHECK-LABEL:     firrtl.module @std.addi_2ins_1outs(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg1: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, %arg2: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>) {
// CHECK-LABEL:     firrtl.module @simple_loop(%arg0: !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>, %arg1: !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>) {
// CHECK:             %[[VAL_0:.*]] = firrtl.instance @handshake.branch_1ins_1outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_1:.*]] = firrtl.instance @handshake.control_merge_1ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_2:.*]] = firrtl.instance @handshake.fork_1ins_3outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_3:.*]] = firrtl.instance @handshake.sink_1ins_0outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>>
// CHECK:             %[[VAL_4:.*]] = firrtl.instance @handshake.constant_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_5:.*]] = firrtl.instance @handshake.constant_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_6:.*]] = firrtl.instance @handshake.branch_1ins_1outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_7:.*]] = firrtl.instance @handshake.branch_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_8:.*]] = firrtl.instance @handshake.branch_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_9:.*]] = firrtl.instance @handshake.mux_3ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_10:.*]] = firrtl.instance @handshake.fork_1ins_2outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_11:.*]] = firrtl.instance @handshake.control_merge_2ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_12:.*]] = firrtl.instance @handshake.fork_1ins_2outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_13:.*]] = firrtl.instance @handshake.mux_3ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_14:.*]] = firrtl.instance @handshake.fork_1ins_2outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_15:.*]] = firrtl.instance @std.cmpi_2ins_1outs_slt {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>>
// CHECK:             %[[VAL_16:.*]] = firrtl.instance @handshake.fork_1ins_3outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<1>>>
// CHECK:             %[[VAL_17:.*]] = firrtl.instance @handshake.conditional_branch_2ins_2outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_18:.*]] = firrtl.instance @handshake.sink_1ins_0outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>>
// CHECK:             %[[VAL_19:.*]] = firrtl.instance @handshake.conditional_branch_2ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_20:.*]] = firrtl.instance @handshake.conditional_branch_2ins_2outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<1>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>, arg3: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_21:.*]] = firrtl.instance @handshake.sink_1ins_0outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>>
// CHECK:             %[[VAL_22:.*]] = firrtl.instance @handshake.merge_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_23:.*]] = firrtl.instance @handshake.merge_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_24:.*]] = firrtl.instance @handshake.control_merge_1ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_25:.*]] = firrtl.instance @handshake.fork_1ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_26:.*]] = firrtl.instance @handshake.sink_1ins_0outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>>
// CHECK:             %[[VAL_27:.*]] = firrtl.instance @handshake.constant_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_28:.*]] = firrtl.instance @std.addi_2ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_29:.*]] = firrtl.instance @handshake.branch_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_30:.*]] = firrtl.instance @handshake.branch_1ins_1outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>>
// CHECK:             %[[VAL_31:.*]] = firrtl.instance @handshake.branch_1ins_1outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_32:.*]] = firrtl.instance @handshake.control_merge_1ins_2outs_ctrl {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>>, arg1: bundle<valid: uint<1>, ready: flip<uint<1>>>, arg2: bundle<valid: uint<1>, ready: flip<uint<1>>, data: sint<64>>>
// CHECK:             %[[VAL_33:.*]] = firrtl.instance @handshake.sink_1ins_0outs {name = ""} : !firrtl.bundle<arg0: bundle<valid: flip<uint<1>>, ready: uint<1>, data: flip<sint<64>>>>
// CHECK:             firrtl.connect %arg1, %[[VAL_34:.*]] : !firrtl.bundle<valid: flip<uint<1>>, ready: uint<1>>, !firrtl.bundle<valid: uint<1>, ready: flip<uint<1>>>

func @simple_loop() {
^bb0:
  br ^bb1
^bb1:	// pred: ^bb0
  %c1 = constant 1 : index
  %c42 = constant 42 : index
  br ^bb2(%c1 : index)
^bb2(%0: index):	// 2 preds: ^bb1, ^bb3
  %1 = cmpi "slt", %0, %c42 : index
  cond_br %1, ^bb3, ^bb4
^bb3:	// pred: ^bb2
  %c1_0 = constant 1 : index
  %2 = addi %0, %c1_0 : index
  br ^bb2(%2 : index)
^bb4:	// pred: ^bb2
  return
}
