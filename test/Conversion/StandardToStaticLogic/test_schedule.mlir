// RUN: circt-opt -schedule-pipeline %s | FileCheck %s
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

module  {
// CHECK-LABEL:   func @simple_loop() {
// CHECK:           br ^bb1
// CHECK:         ^bb1:
// CHECK:           %[[VAL_0:.*]]:2 = "staticlogic.pipeline"() ( {
// CHECK:             %[[VAL_1:.*]] = constant  {startTime = 0 : index} 1 : index
// CHECK:             %[[VAL_2:.*]] = constant  {startTime = 0 : index} 42 : index
// CHECK:             "staticlogic.return"(%[[VAL_1]], %[[VAL_2]]) {startTime = 1 : index} : (index, index) -> ()
// CHECK:           }) : () -> (index, index)
// CHECK:           br ^bb2(%[[VAL_3:.*]]#0 : index)
// CHECK:         ^bb2(%[[VAL_4:.*]]: index):
// CHECK:           %[[VAL_5:.*]] = "staticlogic.pipeline"(%[[VAL_4]], %[[VAL_3]]#1) ( {
// CHECK:           ^bb0(%[[VAL_6:.*]]: index, %[[VAL_7:.*]]: index):
// CHECK:             %[[VAL_8:.*]] = cmpi slt, %[[VAL_6]], %[[VAL_7]] {startTime = 0 : index} : index
// CHECK:             "staticlogic.return"(%[[VAL_8]]) {startTime = 1 : index} : (i1) -> ()
// CHECK:           }) : (index, index) -> i1
// CHECK:           cond_br %[[VAL_9:.*]], ^bb3, ^bb4
// CHECK:         ^bb3:
// CHECK:           %[[VAL_10:.*]] = "staticlogic.pipeline"(%[[VAL_4]]) ( {
// CHECK:           ^bb0(%[[VAL_11:.*]]: index):
// CHECK:             %[[VAL_12:.*]] = constant  {startTime = 0 : index} 1 : index
// CHECK:             %[[VAL_13:.*]] = addi %[[VAL_11]], %[[VAL_12]] {startTime = 1 : index} : index
// CHECK:             "staticlogic.return"(%[[VAL_13]]) {startTime = 2 : index} : (index) -> ()
// CHECK:           }) : (index) -> index
// CHECK:           br ^bb2(%[[VAL_14:.*]] : index)
// CHECK:         ^bb4:
// CHECK:           return
// CHECK:         }
  func @simple_loop() {
    br ^bb1
  ^bb1:  // pred: ^bb0
    %0:2 = "staticlogic.pipeline"() ( {
      %c1 = constant 1 : index
      %c42 = constant 42 : index
      "staticlogic.return"(%c1, %c42) : (index, index) -> ()
    }) : () -> (index, index)
    br ^bb2(%0#0 : index)
  ^bb2(%1: index):  // 2 preds: ^bb1, ^bb3
    %2 = "staticlogic.pipeline"(%1, %0#1) ( {
    ^bb0(%arg0: index, %arg1: index):  // no predecessors
      %4 = cmpi slt, %arg0, %arg1 : index
      "staticlogic.return"(%4) : (i1) -> ()
    }) : (index, index) -> i1
    cond_br %2, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %3 = "staticlogic.pipeline"(%1) ( {
    ^bb0(%arg0: index):  // no predecessors
      %c1 = constant 1 : index
      %4 = addi %arg0, %c1 : index
      "staticlogic.return"(%4) : (index) -> ()
    }) : (index) -> index
    br ^bb2(%3 : index)
  ^bb4:  // pred: ^bb2
    return
  }
}
