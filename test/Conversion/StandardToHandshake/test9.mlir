// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @affine_dma_wait(
// CHECK-SAME:                                    %[[VAL_0:.*]]: index,
// CHECK-SAME:                                    %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_3:.*]]:5 = fork [5] %[[VAL_1]] : none
// CHECK:           %[[VAL_4:.*]] = memref.alloc() : memref<1xi32>
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_3]]#3 {value = 64 : index} : index
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_3]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_3]]#1 {value = 10 : index} : index
// CHECK:           %[[VAL_8:.*]] = constant %[[VAL_3]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_9:.*]] = br %[[VAL_2]] : index
// CHECK:           %[[VAL_10:.*]] = br %[[VAL_3]]#4 : none
// CHECK:           %[[VAL_11:.*]] = br %[[VAL_4]] : memref<1xi32>
// CHECK:           %[[VAL_12:.*]] = br %[[VAL_5]] : index
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_6]] : index
// CHECK:           %[[VAL_14:.*]] = br %[[VAL_7]] : index
// CHECK:           %[[VAL_15:.*]] = br %[[VAL_8]] : index
// CHECK:           %[[VAL_16:.*]] = mux %[[VAL_17:.*]]#5 {{\[}}%[[VAL_18:.*]], %[[VAL_14]]] : index, index
// CHECK:           %[[VAL_19:.*]]:2 = fork [2] %[[VAL_16]] : index
// CHECK:           %[[VAL_20:.*]] = mux %[[VAL_17]]#4 {{\[}}%[[VAL_21:.*]], %[[VAL_9]]] : index, index
// CHECK:           %[[VAL_22:.*]] = mux %[[VAL_17]]#3 {{\[}}%[[VAL_23:.*]], %[[VAL_11]]] : index, memref<1xi32>
// CHECK:           %[[VAL_24:.*]] = mux %[[VAL_17]]#2 {{\[}}%[[VAL_25:.*]], %[[VAL_12]]] : index, index
// CHECK:           %[[VAL_26:.*]] = mux %[[VAL_17]]#1 {{\[}}%[[VAL_27:.*]], %[[VAL_15]]] : index, index
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = control_merge %[[VAL_30:.*]], %[[VAL_10]] : none
// CHECK:           %[[VAL_17]]:6 = fork [6] %[[VAL_29]] : index
// CHECK:           %[[VAL_31:.*]] = mux %[[VAL_17]]#0 {{\[}}%[[VAL_32:.*]], %[[VAL_13]]] : index, index
// CHECK:           %[[VAL_33:.*]]:2 = fork [2] %[[VAL_31]] : index
// CHECK:           %[[VAL_34:.*]] = arith.cmpi slt, %[[VAL_33]]#1, %[[VAL_19]]#1 : index
// CHECK:           %[[VAL_35:.*]]:7 = fork [7] %[[VAL_34]] : i1
// CHECK:           %[[VAL_36:.*]], %[[VAL_37:.*]] = cond_br %[[VAL_35]]#6, %[[VAL_19]]#0 : index
// CHECK:           sink %[[VAL_37]] : index
// CHECK:           %[[VAL_38:.*]], %[[VAL_39:.*]] = cond_br %[[VAL_35]]#5, %[[VAL_20]] : index
// CHECK:           sink %[[VAL_39]] : index
// CHECK:           %[[VAL_40:.*]], %[[VAL_41:.*]] = cond_br %[[VAL_35]]#4, %[[VAL_22]] : memref<1xi32>
// CHECK:           sink %[[VAL_41]] : memref<1xi32>
// CHECK:           %[[VAL_42:.*]], %[[VAL_43:.*]] = cond_br %[[VAL_35]]#3, %[[VAL_24]] : index
// CHECK:           sink %[[VAL_43]] : index
// CHECK:           %[[VAL_44:.*]], %[[VAL_45:.*]] = cond_br %[[VAL_35]]#2, %[[VAL_26]] : index
// CHECK:           sink %[[VAL_45]] : index
// CHECK:           %[[VAL_46:.*]], %[[VAL_47:.*]] = cond_br %[[VAL_35]]#1, %[[VAL_28]] : none
// CHECK:           %[[VAL_48:.*]], %[[VAL_49:.*]] = cond_br %[[VAL_35]]#0, %[[VAL_33]]#0 : index
// CHECK:           sink %[[VAL_49]] : index
// CHECK:           %[[VAL_50:.*]] = merge %[[VAL_48]] : index
// CHECK:           %[[VAL_51:.*]]:2 = fork [2] %[[VAL_50]] : index
// CHECK:           %[[VAL_52:.*]] = merge %[[VAL_38]] : index
// CHECK:           %[[VAL_53:.*]]:2 = fork [2] %[[VAL_52]] : index
// CHECK:           %[[VAL_54:.*]] = merge %[[VAL_40]] : memref<1xi32>
// CHECK:           %[[VAL_55:.*]]:2 = fork [2] %[[VAL_54]] : memref<1xi32>
// CHECK:           %[[VAL_56:.*]] = merge %[[VAL_42]] : index
// CHECK:           %[[VAL_57:.*]]:2 = fork [2] %[[VAL_56]] : index
// CHECK:           %[[VAL_58:.*]] = merge %[[VAL_44]] : index
// CHECK:           %[[VAL_59:.*]]:2 = fork [2] %[[VAL_58]] : index
// CHECK:           %[[VAL_60:.*]] = merge %[[VAL_36]] : index
// CHECK:           %[[VAL_61:.*]], %[[VAL_62:.*]] = control_merge %[[VAL_46]] : none
// CHECK:           %[[VAL_63:.*]]:2 = fork [2] %[[VAL_61]] : none
// CHECK:           sink %[[VAL_62]] : index
// CHECK:           %[[VAL_64:.*]] = arith.addi %[[VAL_51]]#1, %[[VAL_53]]#1 : index
// CHECK:           %[[VAL_65:.*]] = constant %[[VAL_63]]#0 {value = 17 : index} : index
// CHECK:           %[[VAL_66:.*]] = arith.addi %[[VAL_64]], %[[VAL_65]] : index
// CHECK:           memref.dma_wait %[[VAL_55]]#1{{\[}}%[[VAL_66]]], %[[VAL_57]]#1 : memref<1xi32>
// CHECK:           %[[VAL_67:.*]] = arith.addi %[[VAL_51]]#0, %[[VAL_59]]#1 : index
// CHECK:           %[[VAL_21]] = br %[[VAL_53]]#0 : index
// CHECK:           %[[VAL_23]] = br %[[VAL_55]]#0 : memref<1xi32>
// CHECK:           %[[VAL_25]] = br %[[VAL_57]]#0 : index
// CHECK:           %[[VAL_27]] = br %[[VAL_59]]#0 : index
// CHECK:           %[[VAL_18]] = br %[[VAL_60]] : index
// CHECK:           %[[VAL_30]] = br %[[VAL_63]]#1 : none
// CHECK:           %[[VAL_32]] = br %[[VAL_67]] : index
// CHECK:           %[[VAL_68:.*]], %[[VAL_69:.*]] = control_merge %[[VAL_47]] : none
// CHECK:           sink %[[VAL_69]] : index
// CHECK:           return %[[VAL_68]] : none
// CHECK:         }
func @affine_dma_wait(%arg0: index) {
    %0 = memref.alloc() : memref<1xi32>
    %c64 = arith.constant 64 : index
    %c0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    br ^bb1(%c0 : index)
  ^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c10 : index
    cond_br %2, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    %3 = arith.addi %1, %arg0 : index
    %c17 = arith.constant 17 : index
    %4 = arith.addi %3, %c17 : index
    memref.dma_wait %0[%4], %c64 : memref<1xi32>
    %5 = arith.addi %1, %c1 : index
    br ^bb1(%5 : index)
  ^bb3: // pred: ^bb1
    return
  }
