// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @affine_load(
// CHECK-SAME:                                %[[VAL_0:.*]]: index,
// CHECK-SAME:                                %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]]:7 = memory[ld = 3, st = 1] (%[[VAL_3:.*]], %[[VAL_4:.*]], %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]]) {id = 0 : i32, lsq = false} : memref<10xf32>, (f32, index, index, index, index) -> (f32, f32, f32, none, none, none, none)
// CHECK:           %[[VAL_8:.*]]:2 = fork [2] %[[VAL_2]]#6 : none
// CHECK:           %[[VAL_9:.*]]:2 = fork [2] %[[VAL_2]]#5 : none
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_11:.*]]:2 = fork [2] %[[VAL_1]] : none
// CHECK:           %[[VAL_12:.*]]:4 = fork [4] %[[VAL_11]]#1 : none
// CHECK:           %[[VAL_13:.*]] = join %[[VAL_12]]#3, %[[VAL_2]]#4 : none
// CHECK:           %[[VAL_14:.*]] = constant %[[VAL_12]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_15:.*]]:2 = fork [2] %[[VAL_14]] : index
// CHECK:           %[[VAL_16:.*]] = constant %[[VAL_12]]#1 {value = 10 : index} : index
// CHECK:           %[[VAL_17:.*]], %[[VAL_5]] = load {{\[}}%[[VAL_15]]#0] %[[VAL_2]]#0, %[[VAL_11]]#0 : index, f32
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_12]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_10]] : index
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_13]] : none
// CHECK:           %[[VAL_21:.*]] = br %[[VAL_15]]#1 : index
// CHECK:           %[[VAL_22:.*]] = br %[[VAL_16]] : index
// CHECK:           %[[VAL_23:.*]] = br %[[VAL_17]] : f32
// CHECK:           %[[VAL_24:.*]] = br %[[VAL_18]] : index
// CHECK:           %[[VAL_25:.*]] = mux %[[VAL_26:.*]]#4 {{\[}}%[[VAL_27:.*]], %[[VAL_22]]] : index, index
// CHECK:           %[[VAL_28:.*]]:2 = fork [2] %[[VAL_25]] : index
// CHECK:           %[[VAL_29:.*]] = mux %[[VAL_26]]#3 {{\[}}%[[VAL_30:.*]], %[[VAL_19]]] : index, index
// CHECK:           %[[VAL_31:.*]] = mux %[[VAL_26]]#2 {{\[}}%[[VAL_32:.*]], %[[VAL_24]]] : index, index
// CHECK:           %[[VAL_33:.*]] = mux %[[VAL_26]]#1 {{\[}}%[[VAL_34:.*]], %[[VAL_23]]] : index, f32
// CHECK:           %[[VAL_35:.*]], %[[VAL_36:.*]] = control_merge %[[VAL_37:.*]], %[[VAL_20]] : none
// CHECK:           %[[VAL_26]]:5 = fork [5] %[[VAL_36]] : index
// CHECK:           %[[VAL_38:.*]] = mux %[[VAL_26]]#0 {{\[}}%[[VAL_39:.*]], %[[VAL_21]]] : index, index
// CHECK:           %[[VAL_40:.*]]:2 = fork [2] %[[VAL_38]] : index
// CHECK:           %[[VAL_41:.*]] = arith.cmpi slt, %[[VAL_40]]#1, %[[VAL_28]]#1 : index
// CHECK:           %[[VAL_42:.*]]:6 = fork [6] %[[VAL_41]] : i1
// CHECK:           %[[VAL_43:.*]], %[[VAL_44:.*]] = cond_br %[[VAL_42]]#5, %[[VAL_28]]#0 : index
// CHECK:           sink %[[VAL_44]] : index
// CHECK:           %[[VAL_45:.*]], %[[VAL_46:.*]] = cond_br %[[VAL_42]]#4, %[[VAL_29]] : index
// CHECK:           sink %[[VAL_46]] : index
// CHECK:           %[[VAL_47:.*]], %[[VAL_48:.*]] = cond_br %[[VAL_42]]#3, %[[VAL_31]] : index
// CHECK:           sink %[[VAL_48]] : index
// CHECK:           %[[VAL_49:.*]], %[[VAL_50:.*]] = cond_br %[[VAL_42]]#2, %[[VAL_33]] : f32
// CHECK:           sink %[[VAL_50]] : f32
// CHECK:           %[[VAL_51:.*]], %[[VAL_52:.*]] = cond_br %[[VAL_42]]#1, %[[VAL_35]] : none
// CHECK:           %[[VAL_53:.*]], %[[VAL_54:.*]] = cond_br %[[VAL_42]]#0, %[[VAL_40]]#0 : index
// CHECK:           sink %[[VAL_54]] : index
// CHECK:           %[[VAL_55:.*]] = merge %[[VAL_53]] : index
// CHECK:           %[[VAL_56:.*]]:2 = fork [2] %[[VAL_55]] : index
// CHECK:           %[[VAL_57:.*]] = merge %[[VAL_45]] : index
// CHECK:           %[[VAL_58:.*]]:2 = fork [2] %[[VAL_57]] : index
// CHECK:           %[[VAL_59:.*]] = merge %[[VAL_47]] : index
// CHECK:           %[[VAL_60:.*]]:2 = fork [2] %[[VAL_59]] : index
// CHECK:           %[[VAL_61:.*]] = merge %[[VAL_49]] : f32
// CHECK:           %[[VAL_62:.*]]:3 = fork [3] %[[VAL_61]] : f32
// CHECK:           %[[VAL_63:.*]] = merge %[[VAL_43]] : index
// CHECK:           %[[VAL_64:.*]], %[[VAL_65:.*]] = control_merge %[[VAL_51]] : none
// CHECK:           %[[VAL_66:.*]]:4 = fork [4] %[[VAL_64]] : none
// CHECK:           %[[VAL_67:.*]]:2 = fork [2] %[[VAL_66]]#3 : none
// CHECK:           %[[VAL_68:.*]] = join %[[VAL_67]]#1, %[[VAL_9]]#1, %[[VAL_8]]#1, %[[VAL_2]]#3 : none
// CHECK:           sink %[[VAL_65]] : index
// CHECK:           %[[VAL_69:.*]] = arith.addi %[[VAL_56]]#1, %[[VAL_58]]#1 : index
// CHECK:           %[[VAL_70:.*]] = constant %[[VAL_67]]#0 {value = 7 : index} : index
// CHECK:           %[[VAL_71:.*]] = arith.addi %[[VAL_69]], %[[VAL_70]] : index
// CHECK:           %[[VAL_72:.*]]:3 = fork [3] %[[VAL_71]] : index
// CHECK:           %[[VAL_73:.*]], %[[VAL_6]] = load {{\[}}%[[VAL_72]]#2] %[[VAL_2]]#1, %[[VAL_66]]#2 : index, f32
// CHECK:           %[[VAL_74:.*]] = arith.addi %[[VAL_56]]#0, %[[VAL_60]]#1 : index
// CHECK:           %[[VAL_75:.*]], %[[VAL_7]] = load {{\[}}%[[VAL_72]]#1] %[[VAL_2]]#2, %[[VAL_66]]#1 : index, f32
// CHECK:           %[[VAL_76:.*]] = arith.addf %[[VAL_73]], %[[VAL_75]] : f32
// CHECK:           %[[VAL_77:.*]] = arith.addf %[[VAL_62]]#1, %[[VAL_62]]#2 : f32
// CHECK:           sink %[[VAL_77]] : f32
// CHECK:           %[[VAL_78:.*]] = join %[[VAL_66]]#0, %[[VAL_9]]#0, %[[VAL_8]]#0 : none
// CHECK:           %[[VAL_3]], %[[VAL_4]] = store {{\[}}%[[VAL_72]]#0] %[[VAL_76]], %[[VAL_78]] : index, f32
// CHECK:           %[[VAL_30]] = br %[[VAL_58]]#0 : index
// CHECK:           %[[VAL_32]] = br %[[VAL_60]]#0 : index
// CHECK:           %[[VAL_34]] = br %[[VAL_62]]#0 : f32
// CHECK:           %[[VAL_27]] = br %[[VAL_63]] : index
// CHECK:           %[[VAL_37]] = br %[[VAL_68]] : none
// CHECK:           %[[VAL_39]] = br %[[VAL_74]] : index
// CHECK:           %[[VAL_79:.*]], %[[VAL_80:.*]] = control_merge %[[VAL_52]] : none
// CHECK:           sink %[[VAL_80]] : index
// CHECK:           return %[[VAL_79]] : none
// CHECK:         }
  func @affine_load(%arg0: index) {
    %0 = memref.alloc() : memref<10xf32>
    %c0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %9 = memref.load %0[%c0] : memref<10xf32>
    %c1 = arith.constant 1 : index
    br ^bb1(%c0 : index)
  ^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c10 : index
    cond_br %2, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    %3 = arith.addi %1, %arg0 : index
    %c7 = arith.constant 7 : index
    %4 = arith.addi %3, %c7 : index
    %5 = memref.load %0[%4] : memref<10xf32>
    %6 = arith.addi %1, %c1 : index
    %7 = memref.load %0[%4] : memref<10xf32>
    %8 = arith.addf %5, %7 : f32
    %11 = arith.addf %9, %9 : f32
    memref.store %8, %0[%4] : memref<10xf32>
    br ^bb1(%6 : index)
  ^bb3: // pred: ^bb1
    return
  }
