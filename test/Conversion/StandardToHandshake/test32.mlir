// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @test(
// CHECK-SAME:                         %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:5 = memory[ld = 2, st = 1] (%[[VAL_2:.*]], %[[VAL_3:.*]], %[[VAL_4:.*]], %[[VAL_5:.*]]) {id = 0 : i32, lsq = false} : memref<10xf32>, (f32, index, index, index) -> (f32, f32, none, none, none)
// CHECK:           %[[VAL_6:.*]]:2 = fork [2] %[[VAL_1]]#4 : none
// CHECK:           %[[VAL_7:.*]]:2 = fork [2] %[[VAL_0]] : none
// CHECK:           %[[VAL_8:.*]]:3 = fork [3] %[[VAL_7]]#1 : none
// CHECK:           %[[VAL_9:.*]] = join %[[VAL_8]]#2, %[[VAL_1]]#3 : none
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_8]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_8]]#0 {value = 10 : index} : index
// CHECK:           %[[VAL_12:.*]]:2 = fork [2] %[[VAL_11]] : index
// CHECK:           %[[VAL_13:.*]], %[[VAL_4]] = load {{\[}}%[[VAL_12]]#0] %[[VAL_1]]#0, %[[VAL_7]]#0 : index, f32
// CHECK:           %[[VAL_14:.*]] = br %[[VAL_9]] : none
// CHECK:           %[[VAL_15:.*]] = br %[[VAL_10]] : index
// CHECK:           %[[VAL_16:.*]] = br %[[VAL_12]]#1 : index
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_13]] : f32
// CHECK:           %[[VAL_18:.*]] = mux %[[VAL_19:.*]]#2 {{\[}}%[[VAL_20:.*]], %[[VAL_16]]] : index, index
// CHECK:           %[[VAL_21:.*]]:2 = fork [2] %[[VAL_18]] : index
// CHECK:           %[[VAL_22:.*]] = mux %[[VAL_19]]#1 {{\[}}%[[VAL_23:.*]], %[[VAL_17]]] : index, f32
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = control_merge %[[VAL_26:.*]], %[[VAL_14]] : none
// CHECK:           %[[VAL_19]]:3 = fork [3] %[[VAL_25]] : index
// CHECK:           %[[VAL_27:.*]] = mux %[[VAL_19]]#0 {{\[}}%[[VAL_28:.*]], %[[VAL_15]]] : index, index
// CHECK:           %[[VAL_29:.*]]:2 = fork [2] %[[VAL_27]] : index
// CHECK:           %[[VAL_30:.*]] = arith.cmpi slt, %[[VAL_29]]#1, %[[VAL_21]]#1 : index
// CHECK:           %[[VAL_31:.*]]:4 = fork [4] %[[VAL_30]] : i1
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = cond_br %[[VAL_31]]#3, %[[VAL_21]]#0 : index
// CHECK:           sink %[[VAL_33]] : index
// CHECK:           %[[VAL_34:.*]], %[[VAL_35:.*]] = cond_br %[[VAL_31]]#2, %[[VAL_22]] : f32
// CHECK:           sink %[[VAL_35]] : f32
// CHECK:           %[[VAL_36:.*]], %[[VAL_37:.*]] = cond_br %[[VAL_31]]#1, %[[VAL_24]] : none
// CHECK:           %[[VAL_38:.*]], %[[VAL_39:.*]] = cond_br %[[VAL_31]]#0, %[[VAL_29]]#0 : index
// CHECK:           sink %[[VAL_39]] : index
// CHECK:           %[[VAL_40:.*]] = merge %[[VAL_38]] : index
// CHECK:           %[[VAL_41:.*]] = merge %[[VAL_34]] : f32
// CHECK:           %[[VAL_42:.*]]:2 = fork [2] %[[VAL_41]] : f32
// CHECK:           %[[VAL_43:.*]] = merge %[[VAL_32]] : index
// CHECK:           %[[VAL_44:.*]], %[[VAL_45:.*]] = control_merge %[[VAL_36]] : none
// CHECK:           %[[VAL_46:.*]]:3 = fork [3] %[[VAL_44]] : none
// CHECK:           %[[VAL_47:.*]]:2 = fork [2] %[[VAL_46]]#2 : none
// CHECK:           %[[VAL_48:.*]] = join %[[VAL_47]]#1, %[[VAL_6]]#1, %[[VAL_1]]#2 : none
// CHECK:           sink %[[VAL_45]] : index
// CHECK:           %[[VAL_49:.*]] = constant %[[VAL_47]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_50:.*]] = arith.addi %[[VAL_40]], %[[VAL_49]] : index
// CHECK:           %[[VAL_51:.*]]:3 = fork [3] %[[VAL_50]] : index
// CHECK:           %[[VAL_52:.*]], %[[VAL_5]] = load {{\[}}%[[VAL_51]]#2] %[[VAL_1]]#1, %[[VAL_46]]#1 : index, f32
// CHECK:           %[[VAL_53:.*]] = arith.addf %[[VAL_42]]#1, %[[VAL_52]] : f32
// CHECK:           %[[VAL_54:.*]] = join %[[VAL_46]]#0, %[[VAL_6]]#0 : none
// CHECK:           %[[VAL_2]], %[[VAL_3]] = store {{\[}}%[[VAL_51]]#1] %[[VAL_53]], %[[VAL_54]] : index, f32
// CHECK:           %[[VAL_23]] = br %[[VAL_42]]#0 : f32
// CHECK:           %[[VAL_20]] = br %[[VAL_43]] : index
// CHECK:           %[[VAL_26]] = br %[[VAL_48]] : none
// CHECK:           %[[VAL_28]] = br %[[VAL_51]]#0 : index
// CHECK:           %[[VAL_55:.*]], %[[VAL_56:.*]] = control_merge %[[VAL_37]] : none
// CHECK:           sink %[[VAL_56]] : index
// CHECK:           return %[[VAL_55]] : none
// CHECK:         }
  func @test() {
    %10 = memref.alloc() : memref<10xf32>
    %c0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %5 = memref.load %10[%c10] : memref<10xf32>
    br ^bb1(%c0 : index)
  ^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c10 : index
    cond_br %2, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    %c1 = arith.constant 1 : index
    %3 = arith.addi %1, %c1 : index
    %7 = memref.load %10[%3] : memref<10xf32>
    %8 = arith.addf %5, %7 : f32
    memref.store %8, %10[%3] : memref<10xf32>
    br ^bb1(%3 : index)
  ^bb3: // pred: ^bb1
    return
  }
