// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @test(
// CHECK-SAME:                         %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:5 = memory[ld = 2, st = 1] (%[[VAL_2:.*]], %[[VAL_3:.*]], %[[VAL_4:.*]], %[[VAL_5:.*]]) {id = 0 : i32, lsq = false} : memref<10xf32>, (f32, index, index, index) -> (f32, f32, none, none, none)
// CHECK:           %[[VAL_6:.*]]:2 = fork [2] %[[VAL_1]]#3 : none
// CHECK:           %[[VAL_7:.*]]:2 = fork [2] %[[VAL_1]]#2 : none
// CHECK:           %[[VAL_8:.*]]:3 = fork [3] %[[VAL_0]] : none
// CHECK:           %[[VAL_9:.*]] = constant %[[VAL_8]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_8]]#0 {value = 10 : index} : index
// CHECK:           %[[VAL_11:.*]] = br %[[VAL_8]]#2 : none
// CHECK:           %[[VAL_12:.*]] = br %[[VAL_9]] : index
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_10]] : index
// CHECK:           %[[VAL_14:.*]] = mux %[[VAL_15:.*]]#1 {{\[}}%[[VAL_16:.*]], %[[VAL_13]]] : index, index
// CHECK:           %[[VAL_17:.*]]:2 = fork [2] %[[VAL_14]] : index
// CHECK:           %[[VAL_18:.*]], %[[VAL_19:.*]] = control_merge %[[VAL_20:.*]], %[[VAL_11]] : none
// CHECK:           %[[VAL_15]]:2 = fork [2] %[[VAL_19]] : index
// CHECK:           %[[VAL_21:.*]] = mux %[[VAL_15]]#0 {{\[}}%[[VAL_22:.*]], %[[VAL_12]]] : index, index
// CHECK:           %[[VAL_23:.*]]:2 = fork [2] %[[VAL_21]] : index
// CHECK:           %[[VAL_24:.*]] = arith.cmpi slt, %[[VAL_23]]#1, %[[VAL_17]]#1 : index
// CHECK:           %[[VAL_25:.*]]:3 = fork [3] %[[VAL_24]] : i1
// CHECK:           %[[VAL_26:.*]], %[[VAL_27:.*]] = cond_br %[[VAL_25]]#2, %[[VAL_17]]#0 : index
// CHECK:           sink %[[VAL_27]] : index
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = cond_br %[[VAL_25]]#1, %[[VAL_18]] : none
// CHECK:           %[[VAL_30:.*]], %[[VAL_31:.*]] = cond_br %[[VAL_25]]#0, %[[VAL_23]]#0 : index
// CHECK:           sink %[[VAL_31]] : index
// CHECK:           %[[VAL_32:.*]] = merge %[[VAL_30]] : index
// CHECK:           %[[VAL_33:.*]] = merge %[[VAL_26]] : index
// CHECK:           %[[VAL_34:.*]], %[[VAL_35:.*]] = control_merge %[[VAL_28]] : none
// CHECK:           %[[VAL_36:.*]]:4 = fork [4] %[[VAL_34]] : none
// CHECK:           %[[VAL_37:.*]]:2 = fork [2] %[[VAL_36]]#3 : none
// CHECK:           %[[VAL_38:.*]] = join %[[VAL_37]]#1, %[[VAL_6]]#1, %[[VAL_7]]#1, %[[VAL_1]]#4 : none
// CHECK:           sink %[[VAL_35]] : index
// CHECK:           %[[VAL_39:.*]] = constant %[[VAL_37]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_40:.*]]:2 = fork [2] %[[VAL_39]] : index
// CHECK:           %[[VAL_41:.*]] = arith.addi %[[VAL_32]], %[[VAL_40]]#0 : index
// CHECK:           %[[VAL_42:.*]]:3 = fork [3] %[[VAL_41]] : index
// CHECK:           %[[VAL_43:.*]], %[[VAL_4]] = load {{\[}}%[[VAL_42]]#2] %[[VAL_1]]#0, %[[VAL_36]]#2 : index, f32
// CHECK:           %[[VAL_44:.*]]:2 = fork [2] %[[VAL_43]] : f32
// CHECK:           %[[VAL_45:.*]] = arith.addf %[[VAL_44]]#0, %[[VAL_44]]#1 : f32
// CHECK:           %[[VAL_46:.*]] = join %[[VAL_36]]#1, %[[VAL_6]]#0 : none
// CHECK:           %[[VAL_2]], %[[VAL_3]] = store {{\[}}%[[VAL_42]]#1] %[[VAL_45]], %[[VAL_46]] : index, f32
// CHECK:           %[[VAL_47:.*]] = join %[[VAL_36]]#0, %[[VAL_7]]#0 : none
// CHECK:           %[[VAL_48:.*]], %[[VAL_5]] = load {{\[}}%[[VAL_40]]#1] %[[VAL_1]]#1, %[[VAL_47]] : index, f32
// CHECK:           sink %[[VAL_48]] : f32
// CHECK:           %[[VAL_16]] = br %[[VAL_33]] : index
// CHECK:           %[[VAL_20]] = br %[[VAL_38]] : none
// CHECK:           %[[VAL_22]] = br %[[VAL_42]]#0 : index
// CHECK:           %[[VAL_49:.*]], %[[VAL_50:.*]] = control_merge %[[VAL_29]] : none
// CHECK:           sink %[[VAL_50]] : index
// CHECK:           return %[[VAL_49]] : none
// CHECK:         }
  func @test() {
    %10 = memref.alloc() : memref<10xf32>
    %c0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    br ^bb1(%c0 : index)
  ^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c10 : index
    cond_br %2, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    %c1 = arith.constant 1 : index
    %3 = arith.addi %1, %c1 : index
    %7 = memref.load %10[%3] : memref<10xf32>
    %8 = arith.addf %7, %7 : f32
    memref.store %8, %10[%3] : memref<10xf32>
    %5 = memref.load %10[%c1] : memref<10xf32>
    br ^bb1(%3 : index)
  ^bb3: // pred: ^bb1
    return
  }
