// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py

// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @nested_ifs(
// CHECK-SAME:                               %[[VAL_0:.*]]: none, ...) -> none
// CHECK:           %[[VAL_1:.*]]:5 = fork [5] %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]]#3 {value = 0 : index} : index
// CHECK:           %[[VAL_3:.*]]:2 = fork [2] %[[VAL_2]] : index
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]]#2 {value = -1 : index} : index
// CHECK:           %[[VAL_5:.*]] = arith.muli %[[VAL_3]]#0, %[[VAL_4]] : index
// CHECK:           %[[VAL_6:.*]]:2 = fork [2] %[[VAL_5]] : index
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_1]]#1 {value = 20 : index} : index
// CHECK:           %[[VAL_8:.*]] = arith.addi %[[VAL_6]]#1, %[[VAL_7]] : index
// CHECK:           %[[VAL_9:.*]] = arith.cmpi sge, %[[VAL_8]], %[[VAL_3]]#1 : index
// CHECK:           %[[VAL_10:.*]]:3 = fork [3] %[[VAL_9]] : i1
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_1]]#0 {value = true} : i1
// CHECK:           %[[VAL_12:.*]] = arith.xori %[[VAL_10]]#0, %[[VAL_11]] : i1
// CHECK:           %[[VAL_13:.*]] = arith.index_cast %[[VAL_12]] : i1 to index
// CHECK:           %[[VAL_14:.*]] = buffer [2] fifo %[[VAL_13]] : index
// CHECK:           %[[VAL_15:.*]], %[[VAL_16:.*]] = cond_br %[[VAL_10]]#2, %[[VAL_1]]#4 : none
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_10]]#1, %[[VAL_6]]#0 : index
// CHECK:           %[[VAL_19:.*]] = merge %[[VAL_17]] : index
// CHECK:           %[[VAL_20:.*]], %[[VAL_21:.*]] = control_merge %[[VAL_15]] : none
// CHECK:           %[[VAL_22:.*]]:4 = fork [4] %[[VAL_20]] : none
// CHECK:           sink %[[VAL_21]] : index
// CHECK:           %[[VAL_23:.*]] = constant %[[VAL_22]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_24:.*]] = constant %[[VAL_22]]#1 {value = -10 : index} : index
// CHECK:           %[[VAL_25:.*]] = arith.addi %[[VAL_19]], %[[VAL_24]] : index
// CHECK:           %[[VAL_26:.*]] = arith.cmpi sge, %[[VAL_25]], %[[VAL_23]] : index
// CHECK:           %[[VAL_27:.*]]:2 = fork [2] %[[VAL_26]] : i1
// CHECK:           %[[VAL_28:.*]] = constant %[[VAL_22]]#0 {value = true} : i1
// CHECK:           %[[VAL_29:.*]] = arith.xori %[[VAL_27]]#0, %[[VAL_28]] : i1
// CHECK:           %[[VAL_30:.*]] = arith.index_cast %[[VAL_29]] : i1 to index
// CHECK:           %[[VAL_31:.*]] = buffer [2] fifo %[[VAL_30]] : index
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = cond_br %[[VAL_27]]#1, %[[VAL_22]]#3 : none
// CHECK:           %[[VAL_34:.*]], %[[VAL_35:.*]] = control_merge %[[VAL_32]] : none
// CHECK:           sink %[[VAL_35]] : index
// CHECK:           %[[VAL_36:.*]] = br %[[VAL_34]] : none
// CHECK:           %[[VAL_37:.*]] = mux %[[VAL_31]] {{\[}}%[[VAL_36]], %[[VAL_33]]] : index, none
// CHECK:           %[[VAL_38:.*]] = br %[[VAL_37]] : none
// CHECK:           %[[VAL_39:.*]] = merge %[[VAL_18]] : index
// CHECK:           %[[VAL_40:.*]], %[[VAL_41:.*]] = control_merge %[[VAL_16]] : none
// CHECK:           %[[VAL_42:.*]]:4 = fork [4] %[[VAL_40]] : none
// CHECK:           sink %[[VAL_41]] : index
// CHECK:           %[[VAL_43:.*]] = constant %[[VAL_42]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_44:.*]] = constant %[[VAL_42]]#1 {value = -10 : index} : index
// CHECK:           %[[VAL_45:.*]] = arith.addi %[[VAL_39]], %[[VAL_44]] : index
// CHECK:           %[[VAL_46:.*]] = arith.cmpi sge, %[[VAL_45]], %[[VAL_43]] : index
// CHECK:           %[[VAL_47:.*]]:2 = fork [2] %[[VAL_46]] : i1
// CHECK:           %[[VAL_48:.*]] = constant %[[VAL_42]]#0 {value = true} : i1
// CHECK:           %[[VAL_49:.*]] = arith.xori %[[VAL_47]]#0, %[[VAL_48]] : i1
// CHECK:           %[[VAL_50:.*]] = arith.index_cast %[[VAL_49]] : i1 to index
// CHECK:           %[[VAL_51:.*]] = buffer [2] fifo %[[VAL_50]] : index
// CHECK:           %[[VAL_52:.*]], %[[VAL_53:.*]] = cond_br %[[VAL_47]]#1, %[[VAL_42]]#3 : none
// CHECK:           %[[VAL_54:.*]], %[[VAL_55:.*]] = control_merge %[[VAL_52]] : none
// CHECK:           sink %[[VAL_55]] : index
// CHECK:           %[[VAL_56:.*]] = br %[[VAL_54]] : none
// CHECK:           %[[VAL_57:.*]] = mux %[[VAL_51]] {{\[}}%[[VAL_56]], %[[VAL_53]]] : index, none
// CHECK:           %[[VAL_58:.*]] = br %[[VAL_57]] : none
// CHECK:           %[[VAL_59:.*]] = mux %[[VAL_14]] {{\[}}%[[VAL_58]], %[[VAL_38]]] : index, none
// CHECK:           return %[[VAL_59]] : none
// CHECK:         }
  func.func @nested_ifs() {
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %1 = arith.muli %c0, %c-1 : index
    %c20 = arith.constant 20 : index
    %2 = arith.addi %1, %c20 : index
    %3 = arith.cmpi sge, %2, %c0 : index
    cf.cond_br %3, ^bb1, ^bb4
  ^bb1: // pred: ^bb0
    %c0_0 = arith.constant 0 : index
    %c-10 = arith.constant -10 : index
    %4 = arith.addi %1, %c-10 : index
    %5 = arith.cmpi sge, %4, %c0_0 : index
    cf.cond_br %5, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    cf.br ^bb3
  ^bb3: // 2 preds: ^bb1, ^bb2
    cf.br ^bb7
  ^bb4: // pred: ^bb0
    %c0_1 = arith.constant 0 : index
    %c-10_2 = arith.constant -10 : index
    %6 = arith.addi %1, %c-10_2 : index
    %7 = arith.cmpi sge, %6, %c0_1 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5: // pred: ^bb4
    cf.br ^bb6
  ^bb6: // 2 preds: ^bb4, ^bb5
    cf.br ^bb7
  ^bb7: // 2 preds: ^bb3, ^bb6
    return
  }
