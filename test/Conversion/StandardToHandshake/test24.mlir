// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py

// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @nested_ifs(
// CHECK-SAME:                               %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:4 = fork [4] %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_3:.*]]:2 = fork [2] %[[VAL_2]] : index
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]]#1 {value = -1 : index} : index
// CHECK:           %[[VAL_5:.*]] = arith.muli %[[VAL_3]]#0, %[[VAL_4]] : index
// CHECK:           %[[VAL_6:.*]]:2 = fork [2] %[[VAL_5]] : index
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_1]]#0 {value = 20 : index} : index
// CHECK:           %[[VAL_8:.*]] = arith.addi %[[VAL_6]]#1, %[[VAL_7]] : index
// CHECK:           %[[VAL_9:.*]] = arith.cmpi sge, %[[VAL_8]], %[[VAL_3]]#1 : index
// CHECK:           %[[VAL_10:.*]]:3 = fork [3] %[[VAL_9]] : i1
// CHECK:           %[[VAL_11:.*]] = arith.index_cast %[[VAL_10]]#0 : i1 to index
// CHECK:           %[[VAL_12:.*]] = buffer [2] fifo %[[VAL_11]] : index
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_12]] : index
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = cond_br %[[VAL_10]]#2, %[[VAL_1]]#3 : none
// CHECK:           %[[VAL_16:.*]], %[[VAL_17:.*]] = cond_br %[[VAL_10]]#1, %[[VAL_6]]#0 : index
// CHECK:           %[[VAL_18:.*]] = merge %[[VAL_16]] : index
// CHECK:           %[[VAL_19:.*]], %[[VAL_20:.*]] = control_merge %[[VAL_14]] : none
// CHECK:           %[[VAL_21:.*]]:3 = fork [3] %[[VAL_19]] : none
// CHECK:           sink %[[VAL_20]] : index
// CHECK:           %[[VAL_22:.*]] = constant %[[VAL_21]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_23:.*]] = constant %[[VAL_21]]#0 {value = -10 : index} : index
// CHECK:           %[[VAL_24:.*]] = arith.addi %[[VAL_18]], %[[VAL_23]] : index
// CHECK:           %[[VAL_25:.*]] = arith.cmpi sge, %[[VAL_24]], %[[VAL_22]] : index
// CHECK:           %[[VAL_26:.*]]:2 = fork [2] %[[VAL_25]] : i1
// CHECK:           %[[VAL_27:.*]] = arith.index_cast %[[VAL_26]]#0 : i1 to index
// CHECK:           %[[VAL_28:.*]] = buffer [2] fifo %[[VAL_27]] : index
// CHECK:           %[[VAL_29:.*]] = br %[[VAL_28]] : index
// CHECK:           %[[VAL_30:.*]], %[[VAL_31:.*]] = cond_br %[[VAL_26]]#1, %[[VAL_21]]#2 : none
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = control_merge %[[VAL_30]] : none
// CHECK:           sink %[[VAL_33]] : index
// CHECK:           %[[VAL_34:.*]] = br %[[VAL_32]] : none
// CHECK:           %[[VAL_35:.*]] = mux %[[VAL_29]] {{\[}}%[[VAL_34]], %[[VAL_31]]] : index, none
// CHECK:           %[[VAL_36:.*]] = br %[[VAL_35]] : none
// CHECK:           %[[VAL_37:.*]] = merge %[[VAL_17]] : index
// CHECK:           %[[VAL_38:.*]], %[[VAL_39:.*]] = control_merge %[[VAL_15]] : none
// CHECK:           %[[VAL_40:.*]]:3 = fork [3] %[[VAL_38]] : none
// CHECK:           sink %[[VAL_39]] : index
// CHECK:           %[[VAL_41:.*]] = constant %[[VAL_40]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_42:.*]] = constant %[[VAL_40]]#0 {value = -10 : index} : index
// CHECK:           %[[VAL_43:.*]] = arith.addi %[[VAL_37]], %[[VAL_42]] : index
// CHECK:           %[[VAL_44:.*]] = arith.cmpi sge, %[[VAL_43]], %[[VAL_41]] : index
// CHECK:           %[[VAL_45:.*]]:2 = fork [2] %[[VAL_44]] : i1
// CHECK:           %[[VAL_46:.*]] = arith.index_cast %[[VAL_45]]#0 : i1 to index
// CHECK:           %[[VAL_47:.*]] = buffer [2] fifo %[[VAL_46]] : index
// CHECK:           %[[VAL_48:.*]] = br %[[VAL_47]] : index
// CHECK:           %[[VAL_49:.*]], %[[VAL_50:.*]] = cond_br %[[VAL_45]]#1, %[[VAL_40]]#2 : none
// CHECK:           %[[VAL_51:.*]], %[[VAL_52:.*]] = control_merge %[[VAL_49]] : none
// CHECK:           sink %[[VAL_52]] : index
// CHECK:           %[[VAL_53:.*]] = br %[[VAL_51]] : none
// CHECK:           %[[VAL_54:.*]] = mux %[[VAL_48]] {{\[}}%[[VAL_53]], %[[VAL_50]]] : index, none
// CHECK:           %[[VAL_55:.*]] = br %[[VAL_54]] : none
// CHECK:           %[[VAL_56:.*]] = mux %[[VAL_13]] {{\[}}%[[VAL_55]], %[[VAL_36]]] : index, none
// CHECK:           return %[[VAL_56]] : none
// CHECK:         }
  func.func @nested_ifs() {
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %1 = arith.muli %c0, %c-1 : index
    %c20 = arith.constant 20 : index
    %2 = arith.addi %1, %c20 : index
    %3 = arith.cmpi sge, %2, %c0 : index
    cf.cond_br %3, ^bb1, ^bb4
  ^bb1: // pred: ^bb0
    %c0_0 = arith.constant 0 : index
    %c-10 = arith.constant -10 : index
    %4 = arith.addi %1, %c-10 : index
    %5 = arith.cmpi sge, %4, %c0_0 : index
    cf.cond_br %5, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    cf.br ^bb3
  ^bb3: // 2 preds: ^bb1, ^bb2
    cf.br ^bb7
  ^bb4: // pred: ^bb0
    %c0_1 = arith.constant 0 : index
    %c-10_2 = arith.constant -10 : index
    %6 = arith.addi %1, %c-10_2 : index
    %7 = arith.cmpi sge, %6, %c0_1 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5: // pred: ^bb4
    cf.br ^bb6
  ^bb6: // 2 preds: ^bb4, ^bb5
    cf.br ^bb7
  ^bb7: // 2 preds: ^bb3, ^bb6
    return
  }
