// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @affine_store(
// CHECK-SAME:                                 %[[VAL_0:.*]]: index,
// CHECK-SAME:                                 %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_2:.*]] = memory[ld = 0, st = 1] (%[[VAL_3:.*]], %[[VAL_4:.*]]) {id = 0 : i32, lsq = false} : memref<10xf32>, (f32, index) -> none
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_6:.*]]:5 = fork [5] %[[VAL_1]] : none
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_6]]#3 {value = 1.100000e+01 : f32} : f32
// CHECK:           %[[VAL_8:.*]] = constant %[[VAL_6]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_9:.*]] = constant %[[VAL_6]]#1 {value = 10 : index} : index
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_6]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_11:.*]] = br %[[VAL_5]] : index
// CHECK:           %[[VAL_12:.*]] = br %[[VAL_6]]#4 : none
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_7]] : f32
// CHECK:           %[[VAL_14:.*]] = br %[[VAL_8]] : index
// CHECK:           %[[VAL_15:.*]] = br %[[VAL_9]] : index
// CHECK:           %[[VAL_16:.*]] = br %[[VAL_10]] : index
// CHECK:           %[[VAL_17:.*]] = mux %[[VAL_18:.*]]#4 {{\[}}%[[VAL_19:.*]], %[[VAL_15]]] : index, index
// CHECK:           %[[VAL_20:.*]]:2 = fork [2] %[[VAL_17]] : index
// CHECK:           %[[VAL_21:.*]] = mux %[[VAL_18]]#3 {{\[}}%[[VAL_22:.*]], %[[VAL_11]]] : index, index
// CHECK:           %[[VAL_23:.*]] = mux %[[VAL_18]]#2 {{\[}}%[[VAL_24:.*]], %[[VAL_13]]] : index, f32
// CHECK:           %[[VAL_25:.*]] = mux %[[VAL_18]]#1 {{\[}}%[[VAL_26:.*]], %[[VAL_16]]] : index, index
// CHECK:           %[[VAL_27:.*]], %[[VAL_28:.*]] = control_merge %[[VAL_29:.*]], %[[VAL_12]] : none
// CHECK:           %[[VAL_18]]:5 = fork [5] %[[VAL_28]] : index
// CHECK:           %[[VAL_30:.*]] = mux %[[VAL_18]]#0 {{\[}}%[[VAL_31:.*]], %[[VAL_14]]] : index, index
// CHECK:           %[[VAL_32:.*]]:2 = fork [2] %[[VAL_30]] : index
// CHECK:           %[[VAL_33:.*]] = arith.cmpi slt, %[[VAL_32]]#1, %[[VAL_20]]#1 : index
// CHECK:           %[[VAL_34:.*]]:6 = fork [6] %[[VAL_33]] : i1
// CHECK:           %[[VAL_35:.*]], %[[VAL_36:.*]] = cond_br %[[VAL_34]]#5, %[[VAL_20]]#0 : index
// CHECK:           sink %[[VAL_36]] : index
// CHECK:           %[[VAL_37:.*]], %[[VAL_38:.*]] = cond_br %[[VAL_34]]#4, %[[VAL_21]] : index
// CHECK:           sink %[[VAL_38]] : index
// CHECK:           %[[VAL_39:.*]], %[[VAL_40:.*]] = cond_br %[[VAL_34]]#3, %[[VAL_23]] : f32
// CHECK:           sink %[[VAL_40]] : f32
// CHECK:           %[[VAL_41:.*]], %[[VAL_42:.*]] = cond_br %[[VAL_34]]#2, %[[VAL_25]] : index
// CHECK:           sink %[[VAL_42]] : index
// CHECK:           %[[VAL_43:.*]], %[[VAL_44:.*]] = cond_br %[[VAL_34]]#1, %[[VAL_27]] : none
// CHECK:           %[[VAL_45:.*]], %[[VAL_46:.*]] = cond_br %[[VAL_34]]#0, %[[VAL_32]]#0 : index
// CHECK:           sink %[[VAL_46]] : index
// CHECK:           %[[VAL_47:.*]] = merge %[[VAL_37]] : index
// CHECK:           %[[VAL_48:.*]]:2 = fork [2] %[[VAL_47]] : index
// CHECK:           %[[VAL_49:.*]] = merge %[[VAL_45]] : index
// CHECK:           %[[VAL_50:.*]]:2 = fork [2] %[[VAL_49]] : index
// CHECK:           %[[VAL_51:.*]] = merge %[[VAL_39]] : f32
// CHECK:           %[[VAL_52:.*]]:2 = fork [2] %[[VAL_51]] : f32
// CHECK:           %[[VAL_53:.*]] = merge %[[VAL_41]] : index
// CHECK:           %[[VAL_54:.*]]:2 = fork [2] %[[VAL_53]] : index
// CHECK:           %[[VAL_55:.*]] = merge %[[VAL_35]] : index
// CHECK:           %[[VAL_56:.*]], %[[VAL_57:.*]] = control_merge %[[VAL_43]] : none
// CHECK:           %[[VAL_58:.*]]:2 = fork [2] %[[VAL_56]] : none
// CHECK:           %[[VAL_59:.*]]:3 = fork [3] %[[VAL_58]]#1 : none
// CHECK:           %[[VAL_60:.*]] = join %[[VAL_59]]#2, %[[VAL_2]] : none
// CHECK:           sink %[[VAL_57]] : index
// CHECK:           %[[VAL_61:.*]] = constant %[[VAL_59]]#1 {value = -1 : index} : index
// CHECK:           %[[VAL_62:.*]] = arith.muli %[[VAL_48]]#1, %[[VAL_61]] : index
// CHECK:           %[[VAL_63:.*]] = arith.addi %[[VAL_50]]#1, %[[VAL_62]] : index
// CHECK:           %[[VAL_64:.*]] = constant %[[VAL_59]]#0 {value = 7 : index} : index
// CHECK:           %[[VAL_65:.*]] = arith.addi %[[VAL_63]], %[[VAL_64]] : index
// CHECK:           %[[VAL_3]], %[[VAL_4]] = store {{\[}}%[[VAL_65]]] %[[VAL_52]]#1, %[[VAL_58]]#0 : index, f32
// CHECK:           %[[VAL_66:.*]] = arith.addi %[[VAL_50]]#0, %[[VAL_54]]#1 : index
// CHECK:           %[[VAL_22]] = br %[[VAL_48]]#0 : index
// CHECK:           %[[VAL_24]] = br %[[VAL_52]]#0 : f32
// CHECK:           %[[VAL_26]] = br %[[VAL_54]]#0 : index
// CHECK:           %[[VAL_19]] = br %[[VAL_55]] : index
// CHECK:           %[[VAL_29]] = br %[[VAL_60]] : none
// CHECK:           %[[VAL_31]] = br %[[VAL_66]] : index
// CHECK:           %[[VAL_67:.*]], %[[VAL_68:.*]] = control_merge %[[VAL_44]] : none
// CHECK:           sink %[[VAL_68]] : index
// CHECK:           return %[[VAL_67]] : none
// CHECK:         }
  func @affine_store(%arg0: index) {
    %0 = memref.alloc() : memref<10xf32>
    %cst = arith.constant 1.100000e+01 : f32
    %c0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    br ^bb1(%c0 : index)
  ^bb1(%1: index):      // 2 preds: ^bb0, ^bb2
    %2 = arith.cmpi slt, %1, %c10 : index
    cond_br %2, ^bb2, ^bb3
  ^bb2: // pred: ^bb1
    %c-1 = arith.constant -1 : index
    %3 = arith.muli %arg0, %c-1 : index
    %4 = arith.addi %1, %3 : index
    %c7 = arith.constant 7 : index
    %5 = arith.addi %4, %c7 : index
    memref.store %cst, %0[%5] : memref<10xf32>
    %6 = arith.addi %1, %c1 : index
    br ^bb1(%6 : index)
  ^bb3: // pred: ^bb1
    return
  }
