// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -lower-std-to-handshake %s | FileCheck %s
// CHECK-LABEL:   handshake.func @if_for(
// CHECK-SAME:                           %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["inCtrl"], resNames = ["outCtrl"]} {
// CHECK:           %[[VAL_1:.*]]:4 = fork [4] %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_3:.*]] = constant %[[VAL_1]]#1 {value = -1 : index} : index
// CHECK:           %[[VAL_4:.*]]:2 = fork [2] %[[VAL_3]] : index
// CHECK:           %[[VAL_5:.*]] = arith.muli %[[VAL_4]]#0, %[[VAL_4]]#1 : index
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_1]]#0 {value = 20 : index} : index
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_5]], %[[VAL_6]] : index
// CHECK:           %[[VAL_8:.*]] = arith.cmpi sge, %[[VAL_7]], %[[VAL_2]] : index
// CHECK:           %[[VAL_9:.*]], %[[VAL_10:.*]] = cond_br %[[VAL_8]], %[[VAL_1]]#3 : none
// CHECK:           %[[VAL_11:.*]], %[[VAL_12:.*]] = control_merge %[[VAL_9]] : none
// CHECK:           %[[VAL_13:.*]]:4 = fork [4] %[[VAL_11]] : none
// CHECK:           sink %[[VAL_12]] : index
// CHECK:           %[[VAL_14:.*]] = constant %[[VAL_13]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_15:.*]] = constant %[[VAL_13]]#1 {value = 42 : index} : index
// CHECK:           %[[VAL_16:.*]] = constant %[[VAL_13]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_13]]#3 : none
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_14]] : index
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_15]] : index
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_16]] : index
// CHECK:           %[[VAL_21:.*]] = mux %[[VAL_22:.*]]#2 {{\[}}%[[VAL_23:.*]], %[[VAL_19]]] : index, index
// CHECK:           %[[VAL_24:.*]]:2 = fork [2] %[[VAL_21]] : index
// CHECK:           %[[VAL_25:.*]] = mux %[[VAL_22]]#1 {{\[}}%[[VAL_26:.*]], %[[VAL_20]]] : index, index
// CHECK:           %[[VAL_27:.*]], %[[VAL_28:.*]] = control_merge %[[VAL_29:.*]], %[[VAL_17]] : none
// CHECK:           %[[VAL_22]]:3 = fork [3] %[[VAL_28]] : index
// CHECK:           %[[VAL_30:.*]] = mux %[[VAL_22]]#0 {{\[}}%[[VAL_31:.*]], %[[VAL_18]]] : index, index
// CHECK:           %[[VAL_32:.*]]:2 = fork [2] %[[VAL_30]] : index
// CHECK:           %[[VAL_33:.*]] = arith.cmpi slt, %[[VAL_32]]#1, %[[VAL_24]]#1 : index
// CHECK:           %[[VAL_34:.*]]:4 = fork [4] %[[VAL_33]] : i1
// CHECK:           %[[VAL_35:.*]], %[[VAL_36:.*]] = cond_br %[[VAL_34]]#3, %[[VAL_24]]#0 : index
// CHECK:           sink %[[VAL_36]] : index
// CHECK:           %[[VAL_37:.*]], %[[VAL_38:.*]] = cond_br %[[VAL_34]]#2, %[[VAL_25]] : index
// CHECK:           sink %[[VAL_38]] : index
// CHECK:           %[[VAL_39:.*]], %[[VAL_40:.*]] = cond_br %[[VAL_34]]#1, %[[VAL_27]] : none
// CHECK:           %[[VAL_41:.*]], %[[VAL_42:.*]] = cond_br %[[VAL_34]]#0, %[[VAL_32]]#0 : index
// CHECK:           sink %[[VAL_42]] : index
// CHECK:           %[[VAL_43:.*]] = merge %[[VAL_41]] : index
// CHECK:           %[[VAL_44:.*]]:2 = fork [2] %[[VAL_43]] : index
// CHECK:           %[[VAL_45:.*]] = merge %[[VAL_37]] : index
// CHECK:           %[[VAL_46:.*]] = merge %[[VAL_35]] : index
// CHECK:           %[[VAL_47:.*]], %[[VAL_48:.*]] = control_merge %[[VAL_39]] : none
// CHECK:           %[[VAL_49:.*]]:3 = fork [3] %[[VAL_47]] : none
// CHECK:           sink %[[VAL_48]] : index
// CHECK:           %[[VAL_50:.*]] = constant %[[VAL_49]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_51:.*]] = constant %[[VAL_49]]#0 {value = -10 : index} : index
// CHECK:           %[[VAL_52:.*]] = arith.addi %[[VAL_44]]#1, %[[VAL_51]] : index
// CHECK:           %[[VAL_53:.*]] = arith.cmpi sge, %[[VAL_52]], %[[VAL_50]] : index
// CHECK:           %[[VAL_54:.*]]:4 = fork [4] %[[VAL_53]] : i1
// CHECK:           %[[VAL_55:.*]], %[[VAL_56:.*]] = cond_br %[[VAL_54]]#3, %[[VAL_44]]#0 : index
// CHECK:           %[[VAL_57:.*]], %[[VAL_58:.*]] = cond_br %[[VAL_54]]#2, %[[VAL_45]] : index
// CHECK:           %[[VAL_59:.*]], %[[VAL_60:.*]] = cond_br %[[VAL_54]]#1, %[[VAL_46]] : index
// CHECK:           %[[VAL_61:.*]], %[[VAL_62:.*]] = cond_br %[[VAL_54]]#0, %[[VAL_49]]#2 : none
// CHECK:           %[[VAL_63:.*]] = merge %[[VAL_55]] : index
// CHECK:           %[[VAL_64:.*]] = merge %[[VAL_57]] : index
// CHECK:           %[[VAL_65:.*]] = merge %[[VAL_59]] : index
// CHECK:           %[[VAL_66:.*]], %[[VAL_67:.*]] = control_merge %[[VAL_61]] : none
// CHECK:           sink %[[VAL_67]] : index
// CHECK:           %[[VAL_68:.*]] = br %[[VAL_63]] : index
// CHECK:           %[[VAL_69:.*]] = br %[[VAL_64]] : index
// CHECK:           %[[VAL_70:.*]] = br %[[VAL_65]] : index
// CHECK:           %[[VAL_71:.*]] = br %[[VAL_66]] : none
// CHECK:           %[[VAL_72:.*]] = mux %[[VAL_73:.*]]#2 {{\[}}%[[VAL_68]], %[[VAL_56]]] : index, index
// CHECK:           %[[VAL_74:.*]] = mux %[[VAL_73]]#1 {{\[}}%[[VAL_69]], %[[VAL_58]]] : index, index
// CHECK:           %[[VAL_75:.*]]:2 = fork [2] %[[VAL_74]] : index
// CHECK:           %[[VAL_76:.*]] = mux %[[VAL_73]]#0 {{\[}}%[[VAL_70]], %[[VAL_60]]] : index, index
// CHECK:           %[[VAL_77:.*]], %[[VAL_78:.*]] = control_merge %[[VAL_71]], %[[VAL_62]] : none
// CHECK:           %[[VAL_73]]:3 = fork [3] %[[VAL_78]] : index
// CHECK:           %[[VAL_79:.*]] = arith.addi %[[VAL_72]], %[[VAL_75]]#1 : index
// CHECK:           %[[VAL_26]] = br %[[VAL_75]]#0 : index
// CHECK:           %[[VAL_23]] = br %[[VAL_76]] : index
// CHECK:           %[[VAL_29]] = br %[[VAL_77]] : none
// CHECK:           %[[VAL_31]] = br %[[VAL_79]] : index
// CHECK:           %[[VAL_80:.*]], %[[VAL_81:.*]] = control_merge %[[VAL_40]] : none
// CHECK:           sink %[[VAL_81]] : index
// CHECK:           %[[VAL_82:.*]] = br %[[VAL_80]] : none
// CHECK:           %[[VAL_83:.*]], %[[VAL_84:.*]] = control_merge %[[VAL_82]], %[[VAL_10]] : none
// CHECK:           %[[VAL_85:.*]]:4 = fork [4] %[[VAL_83]] : none
// CHECK:           sink %[[VAL_84]] : index
// CHECK:           %[[VAL_86:.*]] = constant %[[VAL_85]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_87:.*]] = constant %[[VAL_85]]#1 {value = 42 : index} : index
// CHECK:           %[[VAL_88:.*]] = constant %[[VAL_85]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_89:.*]] = br %[[VAL_85]]#3 : none
// CHECK:           %[[VAL_90:.*]] = br %[[VAL_86]] : index
// CHECK:           %[[VAL_91:.*]] = br %[[VAL_87]] : index
// CHECK:           %[[VAL_92:.*]] = br %[[VAL_88]] : index
// CHECK:           %[[VAL_93:.*]] = mux %[[VAL_94:.*]]#2 {{\[}}%[[VAL_95:.*]], %[[VAL_91]]] : index, index
// CHECK:           %[[VAL_96:.*]]:2 = fork [2] %[[VAL_93]] : index
// CHECK:           %[[VAL_97:.*]] = mux %[[VAL_94]]#1 {{\[}}%[[VAL_98:.*]], %[[VAL_92]]] : index, index
// CHECK:           %[[VAL_99:.*]], %[[VAL_100:.*]] = control_merge %[[VAL_101:.*]], %[[VAL_89]] : none
// CHECK:           %[[VAL_94]]:3 = fork [3] %[[VAL_100]] : index
// CHECK:           %[[VAL_102:.*]] = mux %[[VAL_94]]#0 {{\[}}%[[VAL_103:.*]], %[[VAL_90]]] : index, index
// CHECK:           %[[VAL_104:.*]]:2 = fork [2] %[[VAL_102]] : index
// CHECK:           %[[VAL_105:.*]] = arith.cmpi slt, %[[VAL_104]]#1, %[[VAL_96]]#1 : index
// CHECK:           %[[VAL_106:.*]]:4 = fork [4] %[[VAL_105]] : i1
// CHECK:           %[[VAL_107:.*]], %[[VAL_108:.*]] = cond_br %[[VAL_106]]#3, %[[VAL_96]]#0 : index
// CHECK:           sink %[[VAL_108]] : index
// CHECK:           %[[VAL_109:.*]], %[[VAL_110:.*]] = cond_br %[[VAL_106]]#2, %[[VAL_97]] : index
// CHECK:           sink %[[VAL_110]] : index
// CHECK:           %[[VAL_111:.*]], %[[VAL_112:.*]] = cond_br %[[VAL_106]]#1, %[[VAL_99]] : none
// CHECK:           %[[VAL_113:.*]], %[[VAL_114:.*]] = cond_br %[[VAL_106]]#0, %[[VAL_104]]#0 : index
// CHECK:           sink %[[VAL_114]] : index
// CHECK:           %[[VAL_115:.*]] = merge %[[VAL_113]] : index
// CHECK:           %[[VAL_116:.*]]:2 = fork [2] %[[VAL_115]] : index
// CHECK:           %[[VAL_117:.*]] = merge %[[VAL_109]] : index
// CHECK:           %[[VAL_118:.*]] = merge %[[VAL_107]] : index
// CHECK:           %[[VAL_119:.*]], %[[VAL_120:.*]] = control_merge %[[VAL_111]] : none
// CHECK:           %[[VAL_121:.*]]:3 = fork [3] %[[VAL_119]] : none
// CHECK:           sink %[[VAL_120]] : index
// CHECK:           %[[VAL_122:.*]] = constant %[[VAL_121]]#1 {value = 0 : index} : index
// CHECK:           %[[VAL_123:.*]] = constant %[[VAL_121]]#0 {value = -10 : index} : index
// CHECK:           %[[VAL_124:.*]] = arith.addi %[[VAL_116]]#1, %[[VAL_123]] : index
// CHECK:           %[[VAL_125:.*]] = arith.cmpi sge, %[[VAL_124]], %[[VAL_122]] : index
// CHECK:           %[[VAL_126:.*]]:4 = fork [4] %[[VAL_125]] : i1
// CHECK:           %[[VAL_127:.*]], %[[VAL_128:.*]] = cond_br %[[VAL_126]]#3, %[[VAL_116]]#0 : index
// CHECK:           %[[VAL_129:.*]], %[[VAL_130:.*]] = cond_br %[[VAL_126]]#2, %[[VAL_117]] : index
// CHECK:           %[[VAL_131:.*]], %[[VAL_132:.*]] = cond_br %[[VAL_126]]#1, %[[VAL_118]] : index
// CHECK:           %[[VAL_133:.*]], %[[VAL_134:.*]] = cond_br %[[VAL_126]]#0, %[[VAL_121]]#2 : none
// CHECK:           %[[VAL_135:.*]] = merge %[[VAL_127]] : index
// CHECK:           %[[VAL_136:.*]] = merge %[[VAL_129]] : index
// CHECK:           %[[VAL_137:.*]] = merge %[[VAL_131]] : index
// CHECK:           %[[VAL_138:.*]], %[[VAL_139:.*]] = control_merge %[[VAL_133]] : none
// CHECK:           %[[VAL_140:.*]]:4 = fork [4] %[[VAL_138]] : none
// CHECK:           sink %[[VAL_139]] : index
// CHECK:           %[[VAL_141:.*]] = constant %[[VAL_140]]#2 {value = 0 : index} : index
// CHECK:           %[[VAL_142:.*]] = constant %[[VAL_140]]#1 {value = 42 : index} : index
// CHECK:           %[[VAL_143:.*]] = constant %[[VAL_140]]#0 {value = 1 : index} : index
// CHECK:           %[[VAL_144:.*]] = br %[[VAL_135]] : index
// CHECK:           %[[VAL_145:.*]] = br %[[VAL_136]] : index
// CHECK:           %[[VAL_146:.*]] = br %[[VAL_137]] : index
// CHECK:           %[[VAL_147:.*]] = br %[[VAL_140]]#3 : none
// CHECK:           %[[VAL_148:.*]] = br %[[VAL_141]] : index
// CHECK:           %[[VAL_149:.*]] = br %[[VAL_142]] : index
// CHECK:           %[[VAL_150:.*]] = br %[[VAL_143]] : index
// CHECK:           %[[VAL_151:.*]] = mux %[[VAL_152:.*]]#5 {{\[}}%[[VAL_153:.*]], %[[VAL_149]]] : index, index
// CHECK:           %[[VAL_154:.*]]:2 = fork [2] %[[VAL_151]] : index
// CHECK:           %[[VAL_155:.*]] = mux %[[VAL_152]]#4 {{\[}}%[[VAL_156:.*]], %[[VAL_150]]] : index, index
// CHECK:           %[[VAL_157:.*]] = mux %[[VAL_152]]#3 {{\[}}%[[VAL_158:.*]], %[[VAL_144]]] : index, index
// CHECK:           %[[VAL_159:.*]] = mux %[[VAL_152]]#2 {{\[}}%[[VAL_160:.*]], %[[VAL_145]]] : index, index
// CHECK:           %[[VAL_161:.*]] = mux %[[VAL_152]]#1 {{\[}}%[[VAL_162:.*]], %[[VAL_146]]] : index, index
// CHECK:           %[[VAL_163:.*]], %[[VAL_164:.*]] = control_merge %[[VAL_165:.*]], %[[VAL_147]] : none
// CHECK:           %[[VAL_152]]:6 = fork [6] %[[VAL_164]] : index
// CHECK:           %[[VAL_166:.*]] = mux %[[VAL_152]]#0 {{\[}}%[[VAL_167:.*]], %[[VAL_148]]] : index, index
// CHECK:           %[[VAL_168:.*]]:2 = fork [2] %[[VAL_166]] : index
// CHECK:           %[[VAL_169:.*]] = arith.cmpi slt, %[[VAL_168]]#1, %[[VAL_154]]#1 : index
// CHECK:           %[[VAL_170:.*]]:7 = fork [7] %[[VAL_169]] : i1
// CHECK:           %[[VAL_171:.*]], %[[VAL_172:.*]] = cond_br %[[VAL_170]]#6, %[[VAL_154]]#0 : index
// CHECK:           sink %[[VAL_172]] : index
// CHECK:           %[[VAL_173:.*]], %[[VAL_174:.*]] = cond_br %[[VAL_170]]#5, %[[VAL_155]] : index
// CHECK:           sink %[[VAL_174]] : index
// CHECK:           %[[VAL_175:.*]], %[[VAL_176:.*]] = cond_br %[[VAL_170]]#4, %[[VAL_157]] : index
// CHECK:           %[[VAL_177:.*]], %[[VAL_178:.*]] = cond_br %[[VAL_170]]#3, %[[VAL_159]] : index
// CHECK:           %[[VAL_179:.*]], %[[VAL_180:.*]] = cond_br %[[VAL_170]]#2, %[[VAL_161]] : index
// CHECK:           %[[VAL_181:.*]], %[[VAL_182:.*]] = cond_br %[[VAL_170]]#1, %[[VAL_163]] : none
// CHECK:           %[[VAL_183:.*]], %[[VAL_184:.*]] = cond_br %[[VAL_170]]#0, %[[VAL_168]]#0 : index
// CHECK:           sink %[[VAL_184]] : index
// CHECK:           %[[VAL_185:.*]] = merge %[[VAL_183]] : index
// CHECK:           %[[VAL_186:.*]] = merge %[[VAL_173]] : index
// CHECK:           %[[VAL_187:.*]]:2 = fork [2] %[[VAL_186]] : index
// CHECK:           %[[VAL_188:.*]] = merge %[[VAL_171]] : index
// CHECK:           %[[VAL_189:.*]] = merge %[[VAL_175]] : index
// CHECK:           %[[VAL_190:.*]] = merge %[[VAL_177]] : index
// CHECK:           %[[VAL_191:.*]] = merge %[[VAL_179]] : index
// CHECK:           %[[VAL_192:.*]], %[[VAL_193:.*]] = control_merge %[[VAL_181]] : none
// CHECK:           sink %[[VAL_193]] : index
// CHECK:           %[[VAL_194:.*]] = arith.addi %[[VAL_185]], %[[VAL_187]]#1 : index
// CHECK:           %[[VAL_156]] = br %[[VAL_187]]#0 : index
// CHECK:           %[[VAL_153]] = br %[[VAL_188]] : index
// CHECK:           %[[VAL_158]] = br %[[VAL_189]] : index
// CHECK:           %[[VAL_160]] = br %[[VAL_190]] : index
// CHECK:           %[[VAL_162]] = br %[[VAL_191]] : index
// CHECK:           %[[VAL_165]] = br %[[VAL_192]] : none
// CHECK:           %[[VAL_167]] = br %[[VAL_194]] : index
// CHECK:           %[[VAL_195:.*]] = merge %[[VAL_176]] : index
// CHECK:           %[[VAL_196:.*]] = merge %[[VAL_178]] : index
// CHECK:           %[[VAL_197:.*]] = merge %[[VAL_180]] : index
// CHECK:           %[[VAL_198:.*]], %[[VAL_199:.*]] = control_merge %[[VAL_182]] : none
// CHECK:           sink %[[VAL_199]] : index
// CHECK:           %[[VAL_200:.*]] = br %[[VAL_195]] : index
// CHECK:           %[[VAL_201:.*]] = br %[[VAL_196]] : index
// CHECK:           %[[VAL_202:.*]] = br %[[VAL_197]] : index
// CHECK:           %[[VAL_203:.*]] = br %[[VAL_198]] : none
// CHECK:           %[[VAL_204:.*]] = mux %[[VAL_205:.*]]#2 {{\[}}%[[VAL_200]], %[[VAL_128]]] : index, index
// CHECK:           %[[VAL_206:.*]] = mux %[[VAL_205]]#1 {{\[}}%[[VAL_201]], %[[VAL_130]]] : index, index
// CHECK:           %[[VAL_207:.*]]:2 = fork [2] %[[VAL_206]] : index
// CHECK:           %[[VAL_208:.*]] = mux %[[VAL_205]]#0 {{\[}}%[[VAL_202]], %[[VAL_132]]] : index, index
// CHECK:           %[[VAL_209:.*]], %[[VAL_210:.*]] = control_merge %[[VAL_203]], %[[VAL_134]] : none
// CHECK:           %[[VAL_205]]:3 = fork [3] %[[VAL_210]] : index
// CHECK:           %[[VAL_211:.*]] = arith.addi %[[VAL_204]], %[[VAL_207]]#1 : index
// CHECK:           %[[VAL_98]] = br %[[VAL_207]]#0 : index
// CHECK:           %[[VAL_95]] = br %[[VAL_208]] : index
// CHECK:           %[[VAL_101]] = br %[[VAL_209]] : none
// CHECK:           %[[VAL_103]] = br %[[VAL_211]] : index
// CHECK:           %[[VAL_212:.*]], %[[VAL_213:.*]] = control_merge %[[VAL_112]] : none
// CHECK:           sink %[[VAL_213]] : index
// CHECK:           return %[[VAL_212]] : none
// CHECK:         }
  func @if_for() {
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %1 = arith.muli %c-1, %c-1 : index
    %c20 = arith.constant 20 : index
    %2 = arith.addi %1, %c20 : index
    %3 = arith.cmpi sge, %2, %c0 : index
    cond_br %3, ^bb1, ^bb7
  ^bb1: // pred: ^bb0
    %c0_0 = arith.constant 0 : index
    %c42 = arith.constant 42 : index
    %c1 = arith.constant 1 : index
    br ^bb2(%c0_0 : index)
  ^bb2(%4: index):      // 2 preds: ^bb1, ^bb5
    %5 = arith.cmpi slt, %4, %c42 : index
    cond_br %5, ^bb3, ^bb6
  ^bb3: // pred: ^bb2
    %c0_1 = arith.constant 0 : index
    %c-10 = arith.constant -10 : index
    %6 = arith.addi %4, %c-10 : index
    %7 = arith.cmpi sge, %6, %c0_1 : index
    cond_br %7, ^bb4, ^bb5
  ^bb4: // pred: ^bb3
    br ^bb5
  ^bb5: // 2 preds: ^bb3, ^bb4
    %8 = arith.addi %4, %c1 : index
    br ^bb2(%8 : index)
  ^bb6: // pred: ^bb2
    br ^bb7
  ^bb7: // 2 preds: ^bb0, ^bb6
    %c0_2 = arith.constant 0 : index
    %c42_3 = arith.constant 42 : index
    %c1_4 = arith.constant 1 : index
    br ^bb8(%c0_2 : index)
  ^bb8(%9: index):      // 2 preds: ^bb7, ^bb14
    %10 = arith.cmpi slt, %9, %c42_3 : index
    cond_br %10, ^bb9, ^bb15
  ^bb9: // pred: ^bb8
    %c0_5 = arith.constant 0 : index
    %c-10_6 = arith.constant -10 : index
    %11 = arith.addi %9, %c-10_6 : index
    %12 = arith.cmpi sge, %11, %c0_5 : index
    cond_br %12, ^bb10, ^bb14
  ^bb10:        // pred: ^bb9
    %c0_7 = arith.constant 0 : index
    %c42_8 = arith.constant 42 : index
    %c1_9 = arith.constant 1 : index
    br ^bb11(%c0_7 : index)
  ^bb11(%13: index):    // 2 preds: ^bb10, ^bb12
    %14 = arith.cmpi slt, %13, %c42_8 : index
    cond_br %14, ^bb12, ^bb13
  ^bb12:        // pred: ^bb11
    %15 = arith.addi %13, %c1_9 : index
    br ^bb11(%15 : index)
  ^bb13:        // pred: ^bb11
    br ^bb14
  ^bb14:        // 2 preds: ^bb9, ^bb13
    %16 = arith.addi %9, %c1_4 : index
    br ^bb8(%16 : index)
  ^bb15:        // pred: ^bb8
    return
  }
