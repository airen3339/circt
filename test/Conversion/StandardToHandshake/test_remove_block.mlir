// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -remove-block-structure %s | FileCheck %s

// CHECK:       module {
// CHECK-LABEL:   handshake.func @dfs_block_order(
// CHECK-SAME:                                    %[[VAL_0:.*]]: none, ...) -> (i32, none) {
// CHECK:           %[[VAL_1:.*]]:2 = "handshake.fork"(%[[VAL_0]]) {control = true} : (none) -> (none, none)
// CHECK:           %[[VAL_2:.*]] = "handshake.constant"(%[[VAL_1]]#0) {value = 42 : i32} : (none) -> i32
// CHECK:           %[[VAL_3:.*]] = "handshake.branch"(%[[VAL_1]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_4:.*]] = "handshake.branch"(%[[VAL_2]]) {control = false} : (i32) -> i32
// CHECK-NEXT:      %[[VAL_5:.*]] = "handshake.merge"(%[[VAL_6:.*]]) : (i32) -> i32
// CHECK:           %[[VAL_7:.*]] = "handshake.merge"(%[[VAL_8:.*]]) : (i32) -> i32
// CHECK:           %[[VAL_9:.*]]:2 = "handshake.control_merge"(%[[VAL_10:.*]]) {control = true} : (none) -> (none, index)
// CHECK:           "handshake.sink"(%[[VAL_9]]#1) : (index) -> ()
// CHECK:           %[[VAL_11:.*]] = addi %[[VAL_5]], %[[VAL_7]] : i32
// CHECK-NEXT:      %[[VAL_12:.*]] = "handshake.merge"(%[[VAL_4]]) : (i32) -> i32
// CHECK:           %[[VAL_13:.*]]:2 = "handshake.control_merge"(%[[VAL_3]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_14:.*]]:2 = "handshake.fork"(%[[VAL_13]]#0) {control = true} : (none) -> (none, none)
// CHECK:           "handshake.sink"(%[[VAL_13]]#1) : (index) -> ()
// CHECK:           %[[VAL_15:.*]] = "handshake.constant"(%[[VAL_14]]#0) {value = 55 : i32} : (none) -> i32
// CHECK:           %[[VAL_6]] = "handshake.branch"(%[[VAL_12]]) {control = false} : (i32) -> i32
// CHECK:           %[[VAL_10]] = "handshake.branch"(%[[VAL_14]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_8]] = "handshake.branch"(%[[VAL_15]]) {control = false} : (i32) -> i32
// CHECK-NEXT:      handshake.return %[[VAL_11]], %[[VAL_9]]#0 : i32, none
// CHECK:         }
// CHECK:       }

module {
  handshake.func @dfs_block_order(%arg0: none, ...) -> (i32, none) {
    %0:2 = "handshake.fork"(%arg0) {control = true} : (none) -> (none, none)
    %1 = "handshake.constant"(%0#0) {value = 42 : i32} : (none) -> i32
    %2 = "handshake.branch"(%0#1) {control = true} : (none) -> none
    %3 = "handshake.branch"(%1) {control = false} : (i32) -> i32
    "handshake.terminator"()[^bb2] : () -> ()
  ^bb1:  // pred: ^bb2
    %4 = "handshake.merge"(%12) : (i32) -> i32
    %5 = "handshake.merge"(%14) : (i32) -> i32
    %6:2 = "handshake.control_merge"(%13) {control = true} : (none) -> (none, index)
    "handshake.sink"(%6#1) : (index) -> ()
    %7 = addi %4, %5 : i32
    handshake.return %7, %6#0 : i32, none
  ^bb2:  // pred: ^bb0
    %8 = "handshake.merge"(%3) : (i32) -> i32
    %9:2 = "handshake.control_merge"(%2) {control = true} : (none) -> (none, index)
    %10:2 = "handshake.fork"(%9#0) {control = true} : (none) -> (none, none)
    "handshake.sink"(%9#1) : (index) -> ()
    %11 = "handshake.constant"(%10#0) {value = 55 : i32} : (none) -> i32
    %12 = "handshake.branch"(%8) {control = false} : (i32) -> i32
    %13 = "handshake.branch"(%10#1) {control = true} : (none) -> none
    %14 = "handshake.branch"(%11) {control = false} : (i32) -> i32
    "handshake.terminator"()[^bb1] : () -> ()
  }
}